{"version":3,"sources":["LoginForm.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["LoginForm","props","useState","chatURL","setChatURL","username","setUsername","password","setPassword","id","className","type","value","onChange","e","target","disabled","onClick","request","XMLHttpRequest","form","FormData","append","open","onreadystatechange","this","readyState","status","setShowModal","data","JSON","parse","responseText","messageToken","message_token","streamToken","stream_token","setStatus","setMessageToken","setStreamToken","alert","send","App","message","setMessage","chatHistory","setChatHistory","Set","users","setUsers","showModal","handleDisconnect","date_format","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","useEffect","console","log","server","EventSource","addEventListener","event","push","created","user","users_list","prevState","remove_user","filter","x","has","_event","close","class","map","msg","Array","from","setRequestHeader","getResponseHeader","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4ed71ab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./LoginForm.css\"\n\nfunction LoginForm(props) {\n    const [chatURL, setChatURL] = useState('');\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    function login() {\n        var request = new XMLHttpRequest();\n        var form = new FormData();\n        form.append(\"password\", password);\n        form.append(\"username\", username);\n        request.open(\"POST\", chatURL + \"/login\");\n        request.onreadystatechange = function() {\n            if (this.readyState != 4) return;\n            if (this.status === 201) {\n                props.setShowModal(false)\n                const data = JSON.parse(this.responseText);\n                const messageToken = data.message_token;\n                const streamToken = data.stream_token;\n                props.setStatus('connected');\n                // props.startStream(chatURL, messageToken, streamToken);\n                props.setMessageToken(messageToken);\n                props.setStreamToken(streamToken);\n                props.setChatURL(chatURL);\n            } else if (this.status === 403) {\n                alert(\"Invalid username or password\");\n            } else if (this.status === 409) {\n                alert(username.value + \" is already logged in\");\n            } else {\n                alert(this.status + \" failure to /login\");\n            }\n        };\n        request.send(form);\n    }\n\n    return(\n        <div>\n            <div id=\"login-modal\" >\n                <div className=\"content\">\n                    <h2>Login</h2>\n                    <div>\n                        <label>Chat URL <br /><input id=\"url\" type=\"text\" value={chatURL} onChange={(e) => setChatURL(e.target.value)}/></label>\n                    </div>\n                    <div>\n                        <label>Username <br /><input id=\"username\" type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)}/></label>\n                    </div>\n                    <div>\n                        <label>Password <br /><input id=\"password\" type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}/></label>\n                    </div>\n                    <div>\n                        <button type=\"submit\" disabled={!(chatURL && username && password)} onClick={login}>Login</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginForm;","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport LoginForm from \"./LoginForm\"\n\nfunction App() {\n  // constructor(props) {\n  //   super(props);\n\n  //   const server = new EventSource(\"http://localhost:3001/stream/a\");\n  //   server.addEventListener(\"message\", (event) => {\n  //     if (event.data === \"Goodbye!\") {\n  //       console.log(\"Closing SSE connection\");\n  //       server.close();\n  //     } else {\n  //       console.log(event.data);\n  //     }\n  //   });\n  //   server.onerror = (_event) => {\n  //     console.log(\"Connection lost, reestablishing\");\n  //   };\n  // }\n  const [status, setStatus] = useState('disconnected');\n  const [message, setMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [chatURL, setChatURL] = useState('');\n  const [messageToken, setMessageToken] = useState(null);\n  const [streamToken, setStreamToken] = useState(null);\n  const [users, setUsers] = useState(new Set());\n  const [showModal, setShowModal] = useState(true);\n\n  useEffect(() => {\n    console.log(\"this is users: \")\n    console.log(users)\n  }, [users]);\n  useEffect(() => {\n    if (chatURL && streamToken) {\n      const server = new EventSource(\n        chatURL + \"/stream/\" + streamToken\n      );\n      server.addEventListener(\n        \"Message\",\n        function(event) {\n          var data = JSON.parse(event.data);\n          chatHistory.push(date_format(data.created) + \" (\" + data.user + \") \" + data.message);\n          setChatHistory([...chatHistory]);\n        },\n        false\n      );\n      server.addEventListener(\n        \"Users\",\n        function(event) {\n          const users_list = new Set(JSON.parse(event.data).users);\n          setUsers(users_list);\n        },\n        false\n      );\n      server.addEventListener(\n        \"Join\",\n        function(event) {\n          var data = JSON.parse(event.data);\n          setUsers((prevState) => (new Set([...prevState, data.user])));\n          chatHistory.push(date_format(data.created) + \" JOIN: \" + data.user);\n          setChatHistory([...chatHistory]);\n          setStatus('connected');\n        },\n        false\n      );\n      server.addEventListener(\n        \"Part\",\n        function(event) {\n          var data = JSON.parse(event.data);\n          const remove_user = new Set([data.user])\n          setUsers((prevState) => (new Set([...prevState].filter(x => !remove_user.has(x)))));\n          chatHistory.push(date_format(data.created) + \" PART: \" + data.user);\n          setChatHistory([...chatHistory]);\n        },\n        false\n      );\n      server.addEventListener(\n        \"Disconnect\",\n        function(_event) {\n            server.close();\n            handleDisconnect();\n        },\n        false\n      );\n      server.addEventListener(\n        \"error\",\n        function(event) {\n            if (event.target.readyState == 2) {\n                handleDisconnect();\n            } else {\n                setStatus('disconnected');\n                console.log(\"Disconnected, retrying\");\n            }\n        },\n        false\n      );\n      server.addEventListener(\n        \"ServerStatus\",\n        function(event) {\n            var data = JSON.parse(event.data);\n            chatHistory.push(date_format(data.created) + \" STATUS: \" + data.status);\n            setChatHistory([...chatHistory]);\n        },\n        false\n      );\n    }\n  }, [chatURL, streamToken])\n\n  function handleDisconnect() {\n    setStatus('disconnected');\n    setMessage('');\n    setChatHistory([]);\n    setChatURL('');\n    setMessageToken(null);\n    setStreamToken(null);\n    setUsers(new Set);\n    setShowModal(true);\n  }\n\n  function date_format(timestamp) {\n    var date = new Date(timestamp * 1000);\n    return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n  }\n\n  function sendMessage() {\n    const form = new FormData();\n    form.append(\"message\", message);\n\n    const request = new XMLHttpRequest();\n    request.open(\"POST\", chatURL + \"/message\");\n    request.setRequestHeader(\n      \"Authorization\",\n      \"Bearer \" + messageToken\n    );\n    request.onreadystatechange = function(event) {\n      if (event.target.readyState == 4 && event.target.status != 403 && messageToken != null) {\n          setMessageToken(event.target.getResponseHeader(\"token\"));\n      }\n    }\n\n    request.send(form);\n    setMessage('');\n  }\n\n  return (\n    <div>\n      <section id=\"container\">\n        <h1 id=\"title\" class={status}>CS291 Chat</h1>\n        <div id=\"window\">\n            <div id=\"chat\">\n              {chatHistory.map((msg) => {\n                return <div>{msg}</div>;\n              })}\n            </div>\n            <div id=\"user_window\">\n                <h2>Online</h2>\n                <ul id=\"users\"></ul>\n                {Array.from(users).map((user) => {\n                  return <ul>{user}</ul>\n                })}\n            </div>\n        </div>\n        <div>\n            <input id=\"message-text\" disabled={status == 'disconnected'} type=\"text\" value={status == 'disconnected' ? 'Please connect to send messages.' : message} onChange={(e) => setMessage(e.target.value)}/>\n            <button id=\"message-send-btn\" disabled={!message} onClick={sendMessage}>Send</button>\n        </div>\n    </section>\n      {showModal &&\n        <LoginForm setStatus={setStatus} setMessageToken={setMessageToken} setStreamToken={setStreamToken} showModal={true} setChatURL={setChatURL} setShowModal={setShowModal} />\n      }\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}